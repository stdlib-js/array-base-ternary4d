{"version":3,"file":"index.js","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a ternary callback to elements in three four-dimensional nested input arrays and assigns results to elements in a four-dimensional nested output array.\n*\n* ## Notes\n*\n* -   The function assumes that the input and output arrays have the same shape.\n*\n* @param {ArrayLikeObject<Array<Array<Array<Collection>>>>} arrays - array-like object containing three input nested arrays and one output nested array\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {Callback} fcn - ternary callback\n* @returns {void}\n*\n* @example\n* import add from '@stdlib/math-base-ops-add3';\n* import ones4d from '@stdlib/array-base-ones4d';\n* import zeros4d from '@stdlib/array-base-zeros4d';\n*\n* var shape = [ 1, 1, 2, 2 ];\n*\n* var x = ones4d( shape );\n* var y = ones4d( shape );\n* var z = ones4d( shape );\n* var out = zeros4d( shape );\n*\n* ternary4d( [ x, y, z, out ], shape, add );\n*\n* console.log( out );\n* // => [ [ [ [ 3.0, 3.0 ], [ 3.0, 3.0 ] ] ] ]\n*/\nfunction ternary4d( arrays, shape, fcn ) {\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar x0;\n\tvar y0;\n\tvar z0;\n\tvar w0;\n\tvar x1;\n\tvar y1;\n\tvar z1;\n\tvar w1;\n\tvar x2;\n\tvar y2;\n\tvar z2;\n\tvar w2;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar w;\n\n\tS0 = shape[ 3 ];\n\tS1 = shape[ 2 ];\n\tS2 = shape[ 1 ];\n\tS3 = shape[ 0 ];\n\tif ( S0 <= 0 || S1 <= 0 || S2 <= 0 || S3 <= 0 ) {\n\t\treturn;\n\t}\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\tz = arrays[ 2 ];\n\tw = arrays[ 3 ];\n\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\tx2 = x[ i3 ];\n\t\ty2 = y[ i3 ];\n\t\tz2 = z[ i3 ];\n\t\tw2 = w[ i3 ];\n\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\tx1 = x2[ i2 ];\n\t\t\ty1 = y2[ i2 ];\n\t\t\tz1 = z2[ i2 ];\n\t\t\tw1 = w2[ i2 ];\n\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\tx0 = x1[ i1 ];\n\t\t\t\ty0 = y1[ i1 ];\n\t\t\t\tz0 = z1[ i1 ];\n\t\t\t\tw0 = w1[ i1 ];\n\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\tw0[ i0 ] = fcn( x0[ i0 ], y0[ i0 ], z0[ i0 ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default ternary4d;\n"],"names":["arrays","shape","fcn","S0","S1","S2","S3","i0","i1","i2","i3","x0","y0","z0","w0","x1","y1","z1","w1","x2","y2","z2","w2","x","y","z","w"],"mappings":";gDAmDA,SAAoBA,EAAQC,EAAOC,GAClC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAMJ,GAJAvB,EAAKF,EAAO,GACZG,EAAKH,EAAO,GACZI,EAAKJ,EAAO,GACZK,EAAKL,EAAO,KACPE,GAAM,GAAKC,GAAM,GAAKC,GAAM,GAAKC,GAAM,GAO5C,IAJAiB,EAAIvB,EAAQ,GACZwB,EAAIxB,EAAQ,GACZyB,EAAIzB,EAAQ,GACZ0B,EAAI1B,EAAQ,GACNU,EAAK,EAAGA,EAAKJ,EAAII,IAKtB,IAJAS,EAAKI,EAAGb,GACRU,EAAKI,EAAGd,GACRW,EAAKI,EAAGf,GACRY,EAAKI,EAAGhB,GACFD,EAAK,EAAGA,EAAKJ,EAAII,IAKtB,IAJAM,EAAKI,EAAIV,GACTO,EAAKI,EAAIX,GACTQ,EAAKI,EAAIZ,GACTS,EAAKI,EAAIb,GACHD,EAAK,EAAGA,EAAKJ,EAAII,IAKtB,IAJAG,EAAKI,EAAIP,GACTI,EAAKI,EAAIR,GACTK,EAAKI,EAAIT,GACTM,EAAKI,EAAIV,GACHD,EAAK,EAAGA,EAAKJ,EAAII,IACtBO,EAAIP,GAAOL,EAAKS,EAAIJ,GAAMK,EAAIL,GAAMM,EAAIN,GAK7C"}